#include <iostream>
#include <windows.h>
#define  NMAX  7    /* максимальное число вершин графа */
#define  RMAX 21    /* максимальное число ребер        	*/
using namespace std;

     /*---------------------------------------------------------*/
     /*         функция ввода матрицы смежности      */
     /*---------------------------------------------------------*/
     void  VVOD_MATR_SM ( int g1 [NMAX][NMAX] , int    n )
/*  Входные данные:    n  –  количество вершин 	 */
          /*  Выходные данные:  g1 – матрица смежности  */
    {    int  i,j ;  /* параметры циклов */
    	/* Обнуление матрицы смежности */
    for  (i=0; i<n; i++)
        for (j=0; j<n; j++)   g1[i][j] = 0;
	cout<<"введите последовательность";
    while (cin>>i>>j)
	{
		if(i==-1 || j== -1)
	break;
		else
         g1[i][j] = g1[j][i] = 1;
	}
	cout<<"  ";
    cout << "Матрица смежности" << endl;

	for  (j=0; j<n; j++)
		cout<<j;
	cout<<endl;
	cout<<"  ";
	for  (j=0; j<n; j++)
		cout<<"-";

    for  (i=0; i<n; i++)
	{   
		cout<<endl<<i<<"|";
        for (j=0; j<n; j++)  cout<< g1[i][j];
	}
}
	 /*------------------------------------------------------------*/
     /*     функция вывода матрицы инцидентности    */
     /*------------------------------------------------------------*/
     void  VIVOD_MATR_IN  ( int g2 [NMAX][RMAX], int    n,  int  k )
/*  Входные данные:   g2 – матрица инцидентности ,
       n  –  количество вершин ,
       k  –  количество ребер	*/
     {  int  i,j ;  /* параметры циклов */
         cout<< endl <<"Матрица инцидентности\n\n";
cout<<"  ";
for  (j=0; j<k; j++)
cout<<j;
cout<<endl;
cout<<"  ";
for  (j=0; j<k; j++)
cout<<"-";

    for  (i=0; i<n; i++)
{   
cout<<endl<<i<<"|";
        for (j=0; j<k; j++)  cout<< g2[i][j];
}    
 }
/*------------------------------*/
         /*     главная функция     */
         /*------------------------------*/

void DisplayIsHavePetlies(int g1[NMAX][NMAX])
{
    for (int i = 0; i < NMAX; i++)
    {
        if (g1[i][i] == 1)
        {
            cout << "Петли в графе: есть";
            return;
        }
    }
    cout << "Петли в графе: нет";
}

int main()
{ 
    int  g1 [NMAX][NMAX] ,	g2 [NMAX][RMAX] = {0} , n, k;
    int g3[NMAX][2];            
    int  i, j; 

    cout<<"\nВведите количество вершин:";
    cin>>n;
    VVOD_MATR_SM (g1, n);   /* ввод матрицы смежности g1 */

    /* Формировавание матрицы инц-ти g2 */
    k=0;
    for (i=0; i<n; i++)
    {
        for (j=i; j<n; j++)
        {
            if (g1[i][j])
            { 
                if(i==j&&g1[i][j]==1)
                {
                    g2[i][k]=2;
                    k++;
                }
                else
                {
                    g2[i][k]=1;
                    g2[j][k]=1;
                    k++;
                }
            }
        }
    }

    VIVOD_MATR_IN (g2, n, k );   /* вывод м-цы  g2 */

    DisplayIsHavePetlies(g1);

    // строка 0 - кол-во преемников
    // строка 1 - кол-во предшественников
    for  (i=0; i<NMAX; i++)
    {
        g3[0][i] = 0;
        g3[1][i] = 0;
    }
	cout<<"введите последовательность (u,v) орграфа";
    while (cin>>i>>j)
	{
        g3[0][i] += 1;
        g3[1][j] += 1;
	}
    
    cout << "Номера вершин, имеющих более двух преемников:";
    for (i = 0; i < NMAX; i++)
    {
        if (g3[0][i] > 2)
            cout << i << " ";
    }

    cout<<endl;
    return 0;
}